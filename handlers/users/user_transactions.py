import json
import random
import time

import requests
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from pyqiwip2p import QiwiP2P

from keyboards.default import all_back_to_main_default, check_user_out_func
from keyboards.inline import *
from loader import dp, bot
from states.state_payment import StorageQiwi
from utils import send_all_admin, clear_firstname, get_dates
from utils.db_api.sqlite import update_userx, get_refillx, add_refillx


###################################################################################
############################## –í–í–û–î –°–£–ú–ú–´ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø ##############################
# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(text_startswith="user_input", state="*")
async def input_amount(call: CallbackQuery, state: FSMContext):
    check_pass = False
    get_payment = get_paymentx()
    if get_payment[5] == "True":
        if get_payment[0] != "None" and get_payment[1] != "None" and get_payment[2] != "None":
            try:
                request = requests.Session()
                request.headers["authorization"] = "Bearer " + get_payment[1]
                response_qiwi = request.get(
                    f"https://edge.qiwi.com/payment-history/v2/persons/{get_payment[0]}/payments",
                    params={"rows": 1, "operation": "IN"})
                if response_qiwi.status_code == 200:
                    pay_amount = int(call.data.split(":")[1])
                    min_input_qiwi = 1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö
                    get_payments = get_paymentx()
                    if get_payments[0] != "None" or get_payments[1] != "None" or get_payments[2] != "None":
                        try:
                            request = requests.Session()
                            request.headers["authorization"] = "Bearer " + get_payments[1]
                            response_qiwi = request.get(
                                f"https://edge.qiwi.com/payment-history/v2/persons/{get_payments[0]}/payments",
                                params={"rows": 1, "operation": "IN"})
                            if pay_amount >= min_input_qiwi:
                                passwd = list("1234567890ABCDEFGHIGKLMNOPQRSTUVYXWZ")
                                random.shuffle(passwd)
                                random_chars = "".join([random.choice(passwd) for x in range(10)])
                                generate_number_check = str(random.randint(100000000000, 999999999999))
                                if get_payments[4] == "form":
                                    qiwi = QiwiP2P(get_payments[2])
                                    bill = qiwi.bill(bill_id=generate_number_check, amount=pay_amount,
                                                     comment=generate_number_check)
                                    way_pay = "Form"
                                    delete_msg = await bot.send_message(call.from_user.id, "ü•ù–ü–ª–∞—Ç—ë–∂ –±—ã–ª —Å–æ–∑–¥–∞–Ω.",
                                                                  reply_markup=check_user_out_func(call.from_user.id), parse_mode='HTML')
                                    send_requests = bill.pay_url
                                    send_message = f"""
üåê –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {send_requests}
–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –Ω–µ–π, –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –Ω–∞ {pay_amount}. –í —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç..

üîÑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"""
                                await call.message.edit_text(send_message,
                                                     reply_markup=create_pay_qiwi_func(send_requests,
                                                                                       generate_number_check,
                                                                                       delete_msg.message_id,
                                                                                       way_pay), parse_mode='HTML')
                                await state.finish()
                            else:
                                await StorageQiwi.here_input_qiwi_amount.set()
                                await message.answer(f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n"
                                                     f"‚ñ∂ –ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{min_input_qiwi}—Ä—É–±</code>\n"
                                                     f"üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ ü•ù", parse_mode='HTML')
                        except json.decoder.JSONDecodeError or UnicodeEncodeError:
                            await state.finish()
                            await message.answer("‚ùï –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                                                 "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.",
                                                 reply_markup=check_user_out_func(message.from_user.id), parse_mode='HTML')
                            await send_all_admin("<b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b> ‚ùå\n"
                                                 f"‚ùï <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>"
                                                 " –ø—ã—Ç–∞–ª—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                                                 "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –∑–∞–º–µ–Ω–∏—Ç–µ QIWI –∫–æ—à–µ–ª—ë–∫", parse_mode='HTML')
                    else:
                        await state.finish()
                        await bot.delete_message(message.chat.id, del_msg.message_id)
                        await message.answer("‚ùï –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                                             "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.",
                                             reply_markup=check_user_out_func(message.from_user.id), parse_mode='HTML')
                        await send_all_admin("<b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b> ‚ùå\n"
                                             f"‚ùï <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>"
                                             " –ø—ã—Ç–∞–ª—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                                             "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –∑–∞–º–µ–Ω–∏—Ç–µ QIWI –∫–æ—à–µ–ª—ë–∫", parse_mode='HTML')
                else:
                    check_pass = True
            except json.decoder.JSONDecodeError:
                check_pass = True

            if check_pass:
                await bot.answer_callback_query(call.id, "‚ùó –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", parse_mode='HTML')
                await send_all_admin(
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={call.from_user.id}'>{clear_firstname(call.from_user.first_name)}</a> "
                    f"–ø—ã—Ç–∞–ª—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n"
                    f"<b>‚ùå QIWI –∫–æ—à–µ–ª—ë–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –°—Ä–æ—á–Ω–æ –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ.</b>", parse_mode='HTML')
        else:
            await bot.answer_callback_query(call.id, "‚ùó –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            await send_all_admin(
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={call.from_user.id}'>{clear_firstname(call.from_user.first_name)}</a> "
                f"–ø—ã—Ç–∞–ª—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n"
                f"<b>‚ùå QIWI –∫–æ—à–µ–ª—ë–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ä–æ—á–Ω–æ –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ.</b>")
    else:
        await bot.answer_callback_query(call.id, "‚ùó –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã")


###################################################################################
####################################### QIWI ######################################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É" QIWI —á–µ—Ä–µ–∑ –§–æ—Ä–º—É
@dp.callback_query_handler(text_startswith="Pay:Form:")
async def check_qiwi_pay(call: CallbackQuery):
    receipt = int(call.data[9:].split(":")[0])
    message_id = call.data[9:].split(":")[1]
    get_payments = get_paymentx()
    get_user_info = get_userx(user_id=call.from_user.id)
    if get_payments[0] != "None" or get_payments[1] != "None" or get_payments[2] != "None":
        qiwi = QiwiP2P(get_payments[2])
        pay_comment = qiwi.check(bill_id=receipt).comment  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–ª–∞—Ç–µ–∂–∞
        pay_status = qiwi.check(bill_id=receipt).status  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        pay_amount = float(qiwi.check(bill_id=receipt).amount)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ä—É–±–ª—è—Ö
        pay_amount = int(pay_amount)
        if pay_status == "PAID":
            get_purchase = get_refillx("*", receipt=receipt)
            if get_purchase is None:

                add_refillx(call.from_user.id, "ü•ù–ö–∏–≤–∏", call.from_user.first_name, pay_comment,
                            pay_amount, receipt, "Form", get_dates(),
                            int(time.time()))

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                update_userx(call.from_user.id,
                             balance=int(get_user_info[4]) + pay_amount)
                await call.message.delete()
                await bot.send_message(call.from_user.id, f"""üíµ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {pay_amount} —Ä—É–±.
üí∞ –í—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –≥–æ–ª–¥—É""",                               
                                          reply_markup=check_user_out_func(call.from_user.id), parse_mode='HTML')
            else:
                await bot.answer_callback_query(call.id, "‚ùó –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ.")
        elif pay_status == "EXPIRED":
            await bot.edit_message_text("<b>‚ùå –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –≤—ã—à–ª–æ. –ü–ª–∞—Ç—ë–∂ –±—ã–ª —É–¥–∞–ª—ë–Ω.</b>",
                                        call.message.chat.id,
                                        call.message.message_id,
                                        reply_markup=check_user_out_func(call.from_user.id), parse_mode='HTML')
        elif pay_status == "WAITING":
            await bot.answer_callback_query(call.id, "‚ùó –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.")
        elif pay_status == "REJECTED":
            await bot.edit_message_text("<b>‚ùå –°—á—ë—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.</b>",
                                        call.message.chat.id,
                                        call.message.message_id,
                                        reply_markup=check_user_out_func(call.from_user.id), parse_mode='HTML')
    else:
        await send_all_admin("<b>‚ùó –ö—Ç–æ-—Ç–æ –ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂, –Ω–æ QIWI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                             "‚ùó –°—Ä–æ—á–Ω–æ –∑–∞–º–µ–Ω–∏—Ç–µ QIWI –¥–∞–Ω–Ω—ã–µ</b>", parse_mode='HTML')
        await bot.answer_callback_query(call.id, "‚ùó –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞,\n"
                                                 "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                                                 "‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")


