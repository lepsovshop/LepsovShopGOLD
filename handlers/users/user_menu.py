# - *- coding: utf- 8 - *-
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from keyboards.default import check_user_out_func, all_back_to_main_default
from keyboards.default.menu import *
from keyboards.inline import *
from keyboards.inline.inline_page import *
from loader import dp, bot
from utils import send_all_admin, clear_firstname, get_dates
from states.state_users import *
from states.state_payment import *
from utils.other_func import clear_firstname, get_dates
import traceback
#from utils.db_api.sqlite import 


# –†–∞–∑–±–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–ª–µ—Ç–∞–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç –¢–ì
def split_messages(get_list, count):
    return [get_list[i:i + count] for i in range(0, len(get_list), count)]




# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
@dp.message_handler(text="üé≥ –ò–≥—Ä—ã", state="*")
async def show_search(message: types.Message, state: FSMContext):
    await state.finish()
    get_categories = get_all_categoriesx(upcategories=1)
    if len(get_categories) >= 1:
        get_kb = buy_item_open_category_ap(0, 1)
        await message.answer("<b>üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>", reply_markup=get_kb, parse_mode='HTML')
    else:
        await message.answer("<b>üì¶ –¢–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>", parse_mode='HTML')


@dp.message_handler(text="üçØ –ö—É–ø–∏—Ç—å –≥–æ–ª–¥—É", state="*")
async def show_search(message: types.Message, state: FSMContext):
    await state.finish()
    get_user = get_userx(user_id=message.from_user.id)
    get_curs = get_settingsp("curs")
    p_kb = InlineKeyboardMarkup()
    p_kb.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="plus_kb"))
    if get_user[4] > 10:
        await StorageUsers.get_gold.set()
        await message.answer(f"""<b>üéñÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>

–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å {round(int(get_user[4])/get_curs, 2)} –≥–æ–ª–¥—ã""", reply_markup=all_back_to_main_default, parse_mode='HTML')
    else:
        await message.answer("<b>‚ùóÔ∏è –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç—É –¥–µ–Ω–µ–≥</b>",reply_markup=p_kb, parse_mode='HTML')


@dp.message_handler(state=StorageUsers.get_gold)
async def input_new_position_price(message: types.Message, state: FSMContext):
    try:
        msg = round(float(message.text.replace(",", ".").replace(" ", "")), 2)
        get_user = get_userx(user_id=message.from_user.id)
        get_curs = get_settingsp("curs")
        p_kb = InlineKeyboardMarkup()
        p_kb.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="plus_kb"))
        if msg*get_curs >= get_user[4]:
            await message.answer("<b>‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞</b>", reply_markup=p_kb, parse_mode='HTML')
        else:
            update_userx(message.from_user.id, balance=round(get_user[4] - msg*get_curs, 2))
            update_userx(message.from_user.id, all_refill=get_user[5] + msg)
            key_menu = check_user_out_func(message.from_user.id)
            update_userx(message.from_user.id, all_pay=round(int(get_user[8]) + msg))
            await message.answer(f"""üçØ –í–∞—à –±–∞–ª–∞–Ω—Å –∑–æ–ª–æ—Ç–∞ –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {msg}G""", reply_markup = key_menu, parse_mode='HTML')
            if msg>=30 and get_user[7] != 0:
                get_user_id = get_userx(increment=get_user[7])[1]
                get_user_gold = get_userx(increment=get_user[7])[5]
                update_userx(get_user_id, all_refill=get_user_gold + 5)
                await bot.send_message(get_user_id, "–í—ã –ø–æ–ª—É—á–∏–ª–∏ 5 –≥–æ–ª–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞")
            await state.finish()
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞ –≥–æ–ª–¥—ã", parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.message_handler(text="–ü—Ä–æ—Ñ–∏–ª—å üìù", state="*")
async def show_profile(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(get_user_profile(message.from_user.id), 
        reply_markup=open_profile_inl, parse_mode='HTML')
    


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "FAQ"
@dp.message_handler(text="–û—Ç–∑—ã–≤—ã üë§", state="*")
async def show_my_deals(message: types.Message, state: FSMContext):
    await state.finish()
    get_settings = get_settingsx()
    send_msg = get_settings[1]
    if "{username}" in send_msg:
        send_msg = send_msg.replace("{username}", f"<b>{message.from_user.username}</b>")
    if "{user_id}" in send_msg:
        send_msg = send_msg.replace("{user_id}", f"<b>{message.from_user.id}</b>")
    if "{firstname}" in send_msg:
        send_msg = send_msg.replace("{firstname}", f"<b>{clear_firstname(message.from_user.first_name)}</b>")
    await message.answer(send_msg, disable_web_page_preview=True, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
@dp.message_handler(text="–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë•", state="*")
async def show_contact(message: types.Message, state: FSMContext):
    await state.finish()
    get_settings = get_settingsx()
    pd_kb = InlineKeyboardMarkup(row_width=3)
    pd_kb.add(InlineKeyboardButton(text="1", callback_data="pd_kb:1"),
    InlineKeyboardButton(text="2", callback_data="pd_kb:2"),
    InlineKeyboardButton(text="3", callback_data="pd_kb:3"))
    pd_kb.add(InlineKeyboardButton(text="4", callback_data="pd_kb:4"),
        InlineKeyboardButton(text="5", callback_data="pd_kb:5"),
        InlineKeyboardButton(text="6", callback_data="pd_kb:6"))
    pd_kb.add(InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è", url=get_settings[0]))
    await message.answer("""1. –°–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–≤–æ–¥—è—Ç –∑–æ–ª–æ—Ç–æ?
2. –ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç —á–µ–∫?
3. –ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ –≤—ã–≤–æ–¥—è—Ç –∑–æ–ª–æ—Ç–æ?
4. –ü–æ—á–µ–º—É –º–Ω–µ –Ω–µ –ø—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏?
5. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —É –≤–∞—Å –ø–æ–∫—É–ø–∞—Ç—å?
6. –ú–æ–∂–Ω–æ –ª–∏ –≤–∞–º –ø—Ä–æ–¥–∞—Ç—å –∑–æ–ª–æ—Ç–æ/–∫–ª–∞–Ω—ã/–∞–∫–∫–∞—É–Ω—Ç/—Å–∫–∏–Ω—ã?
""", reply_markup=pd_kb, disable_web_page_preview=True, parse_mode='HTML')

@dp.callback_query_handler(text_startswith="return_pd", state="*")
async def show_referral(call: CallbackQuery, state: FSMContext):
    await state.finish()
    get_settings = get_settingsx()
    pd_kb = InlineKeyboardMarkup(row_width=3)
    pd_kb.add(InlineKeyboardButton(text="1", callback_data="pd_kb:1"),
    InlineKeyboardButton(text="2", callback_data="pd_kb:2"),
    InlineKeyboardButton(text="3", callback_data="pd_kb:3"))
    pd_kb.add(InlineKeyboardButton(text="4", callback_data="pd_kb:4"),
        InlineKeyboardButton(text="5", callback_data="pd_kb:5"),
        InlineKeyboardButton(text="6", callback_data="pd_kb:6"))
    pd_kb.add(InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è", url=get_settings[0]))
    await call.message.edit_text("""1. –°–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–≤–æ–¥—è—Ç –∑–æ–ª–æ—Ç–æ?
2. –ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç —á–µ–∫?
3. –ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ –≤—ã–≤–æ–¥—è—Ç –∑–æ–ª–æ—Ç–æ?
4. –ü–æ—á–µ–º—É –º–Ω–µ –Ω–µ –ø—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏?
5. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —É –≤–∞—Å –ø–æ–∫—É–ø–∞—Ç—å?
6. –ú–æ–∂–Ω–æ –ª–∏ –≤–∞–º –ø—Ä–æ–¥–∞—Ç—å –∑–æ–ª–æ—Ç–æ/–∫–ª–∞–Ω—ã/–∞–∫–∫–∞—É–Ω—Ç/—Å–∫–∏–Ω—ã?
""", reply_markup=pd_kb, disable_web_page_preview=True, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏"
@dp.callback_query_handler(text="my_buy", state="*")
async def show_referral(call: CallbackQuery, state: FSMContext):
    last_purchases = last_purchasesx(call.from_user.id)
    if len(last_purchases) >= 1:
        await call.message.delete()
        count_split = 0
        save_purchases = []
        for purchases in last_purchases:
            save_purchases.append(f"<b>üìÉ –ß–µ–∫:</b> <code>#{purchases[4]}</code>\n"
                                  f"‚ñ∂ {purchases[9]} | {purchases[5]}—à—Ç | {purchases[6]} —Ä—É–±\n"
                                  f"üïú {purchases[13]}\n"
                                  f"<code>{purchases[10]}</code>")
        await call.message.answer("<b>üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫—É–ø–æ–∫</b>\n"
                                  "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ", parse_mode='HTML')
        save_purchases.reverse()
        len_purchases = len(save_purchases)
        if len_purchases > 4:
            count_split = round(len_purchases / 4)
            count_split = len_purchases // count_split
        if count_split > 1:
            get_message = split_messages(save_purchases, count_split)
            for msg in get_message:
                send_message = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n".join(msg)
                await call.message.answer(send_message, parse_mode='HTML')
        else:
            send_message = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n".join(save_purchases)
            await call.message.answer(send_message, parse_mode='HTML')

        await call.message.answer(get_user_profile(call.from_user.id), reply_markup=open_profile_inl, parse_mode='HTML')
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏")

        
# –ë–∞–ª–∞–Ω—Å

@dp.callback_query_handler(text_startswith="plus_kb", state="*")
async def open_user_profil(call: CallbackQuery, state: FSMContext):
    await state.finish()
    get_user = get_userx(user_id=call.from_user.id)
    min_amm = get_settingsp("sber_min")
    await call.message.delete()
    await bot.send_message(call.from_user.id, f"""üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: 60

üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {min_amm}—Ä

‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ""", reply_markup=all_back_to_main_default, parse_mode='HTML')
    await StorageQiwi.here_input_sber_amount.set()


@dp.message_handler(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥", state="*")
async def show_contact(message: types.Message, state: FSMContext):
    await state.finish()
    await StorageQiwi.here_input_sber_amount.set()
    get_user = get_userx(user_id=message.from_user.id)
    min_amm = get_settingsp("sber_min")
    await bot.send_message(message.from_user.id, f"""üí∞–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: 60

üíµ–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {min_amm}—Ä

‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ""", reply_markup=all_back_to_main_default, parse_mode='HTML')
    
@dp.message_handler(text="–í—ã–≤–µ—Å—Ç–∏ –≥–æ–ª–¥—ÉüçØ", state="*")
async def show_contact(message: types.Message, state: FSMContext):
    await state.finish()
    get_user = get_userx(user_id=message.from_user.id)
    if get_user[5] < 100:
        await bot.send_message(message.from_user.id, f"""‚ùóÔ∏è –í—ã–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç 100 –≥–æ–ª–¥—ã""")
    else:
        await StorageUsers.get_gold_minus.set()
        await bot.send_message(message.from_user.id, f"""üçØ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ (—É –≤–∞—Å {get_user[5]}):""", reply_markup=all_back_to_main_default, parse_mode='HTML')

@dp.message_handler(state=StorageUsers.get_gold_minus)
async def input_new_posion_price(message: types.Message, state: FSMContext):
    try:
        msg = int(message.text.replace(",", ".").replace(" ", ""))
        get_user = get_userx(user_id=message.from_user.id)
        if msg < 100:
            await message.answer(f"""‚ùóÔ∏è –í—ã–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç 100 –≥–æ–ª–¥—ã""")
        else:
            if get_user[5] >= msg:
                tovar = get_settingsp("tovar")
                summ_com = msg + ((msg/100)*get_settingsp("com")) + (random.choice(list(range(1,100)))/100)
                summ = msg
                async with state.proxy() as data:
                    data["get_gold_nick"] = f"{get_user[1]}"
                    data["get_gold_minus"] = summ
                    data["get_gold_com"] = summ_com
                await StorageUsers.get_rek_minus.set()
                await message.answer(f"""–û—Ç–ª–∏—á–Ω–æ üôå
üå¥ –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –≤–∞—à Nickname –≤ —Å—Ç–∞–Ω–¥–æ—Ñ—Ñ :
WWWWWWWWWWWWWWWWWW
–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ñ–µ–π–∫–æ–≤.



–¢–µ–ø–µ—Ä—å –≤—ã—Å—Ç–∞–≤–∏—Ç–µ {tovar} —Å–∫–∏–Ω –∑–∞ {summ_com} –≥–æ–ª–¥—ã, —á—Ç–æ–±—ã –≤–∞–º –ø—Ä–∏—à–ª–æ {summ} –≥–æ–ª–¥—ã
–ò –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–¢–æ–ª—å–∫–æ –º–æ–∏ –∑–∞–ø—Ä–æ—Å—ã", —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞.

‚ùóÔ∏è –í—Å—é –∫–æ–º–∏—Å—Å–∏—é —Ä—ã–Ω–∫–∞ –º—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è. –í—ã—Å—Ç–∞–≤–ª—è–π—Ç–µ –∏–º–µ–Ω–Ω–æ –∑–∞ {summ_com}, —á—Ç–æ–±—ã –≤–∞–º –ø—Ä–∏—à–ª–æ {summ} –≥–æ–ª–¥—ã, –∏ —á—Ç–æ–±—ã –≤–∞—à —Å–∫–∏–Ω –±—ã–ª–æ –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏.

ü•Ω–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –°–ö–ò–ù–¨–¢–ï –°–ö–†–ò–ù–®–¢–û–¢ –°–ö–ò–ù–ê –ü–û–°–õ–ï –≠–¢–û–ì–û –°–û–û–ë–©–ï–ù–ò–Øüíç""", parse_mode='HTML')
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –≥–æ–ª–¥—ãüçØ", parse_mode='HTML')

    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞ –≥–æ–ª–¥—ãüçØ", parse_mode='HTML')
        


@dp.message_handler(content_types=["photo"], state=StorageUsers.get_rek_minus)
async def position_get_image(message: types.Message, state: FSMContext):
    photo = message.text
    get_user = get_userx(user_id=message.from_user.id)
    async with state.proxy() as data:
        gold = data["get_gold_minus"]
        summ_com = data["get_gold_com"]
        nick = data["get_gold_nick"]
    if get_user[5] >= gold:
        await state.finish()
        key_menu = check_user_out_func(message.from_user.id)

        bal_minus = InlineKeyboardMarkup()
        bal_minus.add(InlineKeyboardButton(text="‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"minus_pr:{message.from_user.id}:{gold}"))
        bal_minus.add(InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"minus_ot:{message.from_user.id}:{gold}"))
        ball_g = get_user[5]
        update_userx(message.from_user.id, all_refill = round(ball_g - gold, 2))
        await message.answer(f"""üí∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –í—ã–≤–æ–¥ {gold}G –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ 
–û–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏! üí∞
üíµ–¢–∞–∫–∂–µ –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –∞–∫—Ü–∏–∏!""", reply_markup = key_menu, parse_mode='HTML')
        await send_all_admin(f"""<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_user[1]}'>{get_user[3]}</a> (<code>{get_user[1]}</code>)
        
–ù–∏–∫–Ω–µ–π–º: <code>{nick}</code>
–°—É–º–º–∞ –≥–æ–ª–¥—ã: <code>{gold}</code>
–°—É–º–º–∞ –≥–æ–ª–¥—ã —Å –∫–æ–º–∏—Å—Å–∏–µ–π: <code>{summ_com}</code>""", markup=bal_minus, photo = message.photo[0].file_id)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –≥–æ–ª–¥—ãüçØ", parse_mode='HTML')

    
@dp.callback_query_handler(text_startswith="user_profil", state="*")
async def open_user_profil(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(get_user_profile(call.from_user.id), reply_markup=open_profile_inl, parse_mode='HTML')

@dp.callback_query_handler(text_startswith="sber_plus", state="*")
async def open_user_profil(call: CallbackQuery, state: FSMContext):
    amm = int(call.data.split(":")[1])
    await state.finish()
    sber_rek = get_settingsp("sber_rek")
    async with state.proxy() as data:
        data["here_input_sber_amount"] = amm
    await call.message.edit_text(f"""üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:
üí≥ –ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã: <code>{sber_rek}</code>
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>tb: {call.from_user.id}</code>
üí≤ –°—É–º–º–∞: <code>{amm}</code>‚ÇΩ

üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞""", parse_mode='HTML')
    await StorageQiwi.here_input_img_amount.set()

@dp.message_handler(state=StorageQiwi.here_input_sber_amount)
async def here_input_sber_amount(message: types.Message, state: FSMContext):
    try:
        amm = int(message.text)
        min_amm = get_settingsp("sber_min")
        if amm >= min_amm:
            minus_ball_kb = InlineKeyboardMarkup(row_width=1)
            minus_ball_kb.add(InlineKeyboardButton(text="ü•ù–ö–∏–≤–∏", callback_data=f"user_input:{message.text}"))
            minus_ball_kb.add(InlineKeyboardButton(text="üü¢–°–±–µ—Ä–±–∞–Ω–∫", callback_data=f"sber_plus:{message.text}"))
            curs = get_settingsp("curs")
            await message.answer(f"""‚≠êÔ∏è –ó–∞ {message.text} —Ä—É–±–ª–µ–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å {round(int(message.text)/curs, 2)} –∑–æ–ª–æ—Ç–∞
üñã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
""", reply_markup=minus_ball_kb, parse_mode='HTML')
            await state.finish()
        else:
            await message.answer(f"""–ú–∏–Ω —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {min_amm} —Ä—É–±.""")
    except:
        await message.answer(f"""–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è""")


@dp.message_handler(content_types=["photo"], state=StorageQiwi.here_input_img_amount)
async def position_get_image(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        ammount = data["here_input_sber_amount"]
    kb_kb = check_user_out_func(message.from_user.id)
    await message.answer(f"""–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞""", reply_markup=kb_kb, parse_mode='HTML')
    minus_ball_kb = InlineKeyboardMarkup(row_width=2)
    minus_ball_kb.add(InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"sber_pr:{message.from_user.id}:{ammount}"))
    minus_ball_kb.add(InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"sber_ot:{message.from_user.id}:{ammount}"))
    get_user = get_userx(user_id=message.from_user.id)
    position_photo = message.photo[0].file_id
    await send_all_admin(f"""–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_user[1]}'>{get_user[3]}</a> <code>({get_user[1]})</code>
–°—É–º–º–∞: {ammount} —Ä—É–±.
–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π: <code>tb: {message.from_user.id}</code>""", markup=minus_ball_kb, photo = position_photo)

    await state.finish()
    
################################################################################################
######################################### –ü–û–ö–£–ü–ö–ê –¢–û–í–ê–†–ê #######################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_open_category", state="*")
async def open_category_for_buy_item(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    get_category = get_categoryx("*", category_id=category_id)
    get_positions = get_positionsx("*", category_id=category_id)
    get_all_podcategories1 = get_all_categoriesx(upcategories=category_id)
    if len(get_all_podcategories1) > 0:
        get_categories = get_all_categoriesx(upcategories=category_id)
        if len(get_categories) >= 1:
            get_kb = buy_item_open_category_ap(0, category_id)
            await call.message.edit_text("<b>üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>", reply_markup=get_kb, parse_mode='HTML')
        else:
            await call.message.edit_text("<b>üì¶ –¢–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>", parse_mode='HTML')
    else:
        get_kb = buy_item_item_position_ap(0, category_id)
        if len(get_all_podcategories1) > 0:
            get_kb = buy_item_open_category_ap(0, category_id)
            await call.message.edit_text("<b>üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>", reply_markup=get_kb, parse_mode='HTML')
        else:
            if len(get_positions) >= 1:
                await call.message.edit_text("<b>üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                             reply_markup=get_kb, parse_mode='HTML')
            else:
                await call.answer(f"‚ùï –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category[2]} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")


# –í–µ—Ä–Ω—É—Ç—Å—å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="back_buy_item_to_category", state="*")
async def back_category_for_buy_item(call: CallbackQuery, state: FSMContext):
    up_cat = int(call.data.split(":")[1])
    await call.message.edit_text("<b>üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=buy_item_open_category_ap(0, up_cat), parse_mode='HTML')


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="buy_category_nextp", state="*")
async def buy_item_next_page_category(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=buy_item_next_page_category_ap(remover), parse_mode='HTML')


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="buy_category_prevp", state="*")
async def buy_item_prev_page_category(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=buy_item_previous_page_category_ap(remover), parse_mode='HTML')


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="buy_position_nextp", state="*")
async def buy_item_next_page_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.edit_text("<b>üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=item_buy_next_page_position_ap(remover, category_id), parse_mode='HTML')


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="buy_position_prevp", state="*")
async def buy_item_prev_page_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.edit_text("<b>üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=item_buy_previous_page_position_ap(remover, category_id), parse_mode='HTML')


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="back_buy_item_position", state="*")
async def buy_item_next_page_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    await call.message.delete()
    await call.message.answer("<b>üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                              reply_markup=buy_item_item_position_ap(remover, category_id), parse_mode='HTML')


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_open_position", state="*")
async def open_category_for_create_position(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    category_id = int(call.data.split(":")[4])
    get_position = get_positionx("*", position_id=position_id)
    get_category = get_categoryx("*", category_id=category_id)
    delete_msg = await call.message.answer("<b>üîÑ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è</b>", parse_mode='HTML')
    await delete_msg.delete()
    send_msg = f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{get_position[2]}</code>\n\n" \
               f"<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{get_position[3]} —Ä—É–±</code>\n\n" \
               f"<b>üìú –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n" \
               f"{get_position[4]}\n"
    if len(get_position[5]) >= 5:
        await call.message.delete()
        await call.message.answer_photo(get_position[5],
                                        send_msg,
                                        reply_markup=confirm_buy_items(remover, position_id, delete_msg.from_user.id, category_id, get_position[3]), parse_mode='HTML')
    else:
        await call.message.edit_text(send_msg,
                                     reply_markup=confirm_buy_items(remover, position_id, delete_msg.from_user.id, category_id, get_position[3]), parse_mode='HTML')






# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="xbuy_item:", state="*")
async def yes_buy_this_item(call: CallbackQuery, state: FSMContext):
    get_settings = get_settingsx()
    delete_msg = await call.message.answer("<b>üîÑ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è</b>", parse_mode='HTML')
    position_id = int(call.data.split(":")[1])
    get_count = int(call.data.split(":")[2])
    message_id = int(call.data.split(":")[3])
    url = call.data.split(":")[4]

    await delete_msg.delete()

    get_position = get_positionx("*", position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)
    amount_pay = int(get_position[3]) * get_count

    if True:
        if int(get_user[4]) >= amount_pay:
            amount_pay = int(get_position[3]) * get_count

            random_number = [random.randint(100000000, 999999999)]
            passwd = list("ABCDEFGHIGKLMNOPQRSTUVYXWZ")
            random.shuffle(passwd)
            random_char = "".join([random.choice(passwd) for x in range(1)])
            receipt = random_char + str(random_number[0])
            buy_time = get_dates()

            
            add_purchasex(call.from_user.id, call.from_user.username, call.from_user.first_name,
                          receipt, 0, amount_pay, get_position[3], get_position[1], get_position[2],
                          0, get_user[4], int(get_user[4]) - amount_pay, buy_time, int(time.time()), url)
            update_userx(call.from_user.id, balance=get_user[4] - amount_pay)
            win = random.choice(eval(get_position[8]))
            await call.message.answer(f"–í–∞—à –≤—ã–∏–≥—Ä—ã—à—å {win} –≥–æ–ª–¥—ã", reply_markup=check_user_out_func(call.from_user.id), parse_mode='HTML')
            update_userx(call.from_user.id, balance=get_user[4] - amount_pay)
            update_userx(call.from_user.id, all_refill=get_user[5] + win)
            await send_all_admin(f"<b>üì¶ –ß–µ–ª–æ–≤–µ–∫ –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä—ã ‚úÖ</b>\n"
                                      f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                      f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                      f"üìÉ –ß–µ–∫: <code>#{receipt}</code>\n"
                                      f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                      f"üì¶ –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{get_count}</code>\n"
                                      f"üíµ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: <code>{amount_pay} —Ä—É–±</code>\n"
                                      f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <a href='tg://user?id={get_user[1]}'>{get_user[3]}</a> <code>({get_user[1]})</code>\n"
                                      f"üïú –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{buy_time}</code>")
        else:
            await call.message.answer("<b>‚ùó –ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>", parse_mode='HTML')
    else:
        await state.finish()
        await call.message.answer("<b>üì¶ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.</b>",
                                  check_user_out_func(call.from_user.id))

@dp.callback_query_handler(text_startswith="ref_sistem", state="*")
async def buy_item_next_page_position(call: CallbackQuery, state: FSMContext):
    await state.finish()
    id = get_userx(user_id=call.from_user.id)[0]
    await call.message.edit_text(f"""üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ - <code>t.me/Gg123455_bot?start=ref-{id}</code>

üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º. –ï—Å–ª–∏ –í–∞—à –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 5 –≥–æ–ª–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å!""",
                                 reply_markup=ref_kb, parse_mode='HTML')


@dp.callback_query_handler(text_startswith="my_ref", state="*")
async def buy_item_next_page_position(call: CallbackQuery, state: FSMContext):
    id = get_userx(user_id=call.from_user.id)[0]
    col = len(get_usersx(ref_code=id))
    await state.finish()
    await call.message.edit_text(f"""üë§ –£ –≤–∞—Å {col} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤""",
                                 reply_markup=to_ref_kb, parse_mode='HTML')

@dp.callback_query_handler(text_startswith="promo_get", state="*")
async def buy_item_next_page_position(call: CallbackQuery, state: FSMContext):
    id = get_userx(user_id=call.from_user.id)
    await call.message.delete()
    msg_del = await bot.send_message(call.from_user.id, f"""–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥""", reply_markup=all_back_to_main_default, parse_mode='HTML')
    await StorageUsers.get_promo.set()

@dp.message_handler(state=StorageUsers.get_promo)
async def get_promo(message: types.Message, state: FSMContext):
    promo = get_itemsx("*", item_data = message.text.replace(" ", ""))
    if promo is None or len(promo) == 0:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        promo = promo[0]
        if message.from_user.id in eval(promo[4]):
            await message.answer("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
        else:
            if promo[3] <= len(eval(promo[4])):
                await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å")
            else:
                if promo[5] == "–≥–æ–ª–¥–∞":
                    get_user = get_userx(user_id=message.from_user.id)
                    update_userx(message.from_user.id, all_refill=get_user[5]+promo[1])
                    list_promo = eval(promo[4])
                    list_promo.append(message.from_user.id)
                    update_itemx(promo[0], kol_get=str(list_promo))
                    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ {promo[1]}G –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", reply_markup=check_user_out_func(message.from_user.id))
                else:
                    get_user = get_userx(user_id=message.from_user.id)
                    update_userx(message.from_user.id, balance=get_user[4]+promo[1])
                    update_itemx(promo[0], kol_get=str(eval(promo[4]).append(message.from_user.id)))
                    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ {promo[1]}—Ä—É–±. –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", reply_markup=check_user_out_func(message.from_user.id))

@dp.callback_query_handler(text_startswith="pd_kb", state="*")
async def pd_kb(call: CallbackQuery, state: FSMContext):
    await state.finish()
    id_v = int(call.data.split(":")[1])
    get_settings = get_settingsx()
    pd_rt = InlineKeyboardMarkup(row_width=2)
    pd_rt.add(InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è", url=get_settings[0]),
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="return_pd"))
    if id_v == 1:
        await call.message.edit_text("""–í—ã–≤–æ–¥ –∑–æ–ª–æ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ 24 —á–∞—Å–æ–≤ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥. –ù–æ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –≤—ã–≤–æ–¥ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥ –¥–æ —á–∞—Å–∞.""", reply_markup=pd_rt, disable_web_page_preview=True, parse_mode='HTML')
    if id_v == 2:
        await call.message.edit_text("""–ß–µ–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ —Ä—É—á–Ω—É—é, –∞ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ï—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Ä–∞–Ω–æ —É—Ç—Ä–æ–º –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º, —Ç–æ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ–∫. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.""", reply_markup=pd_rt, disable_web_page_preview=True, parse_mode='HTML')
    if id_v == 3:
        await call.message.edit_text("""–í—ã–≤–æ–¥ –∑–æ–ª–æ—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤. –ù–æ –º—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –≤—ã–≤–µ—Å—Ç–∏ –≤–∞–º –∑–æ–ª–æ—Ç–æ. –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤, –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å, –∏ –ø–æ–∫–∞ –æ–Ω–∞ –¥–æ–π–¥—ë—Ç –¥–æ –≤–∞—Å, –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ù–æ –µ—Å–ª–∏ –≤—ã —É–∂–µ –ø–æ–ª —á–∞—Å–∞ –∫–∞–∫ –Ω–∞ 1 –º–µ—Å—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä—ã–Ω–∫–æ–º ( —Å–ª–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–∫–∏–Ω) –∏–ª–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫ –≤–∑—è–ª –ø–µ—Ä–µ—Ä—ã–≤.""", reply_markup=pd_rt, disable_web_page_preview=True, parse_mode='HTML')
    if id_v == 4:
        await call.message.edit_text("""–ï—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏ —á–µ—Ä–µ–∑ QIWI, —Ç–æ –Ω–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–¥–µ –≤–∞–º –≤—ã–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É, –∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –Ω–∞–∂–º–∏—Ç–µ –µ—ë. –ù–æ –µ—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º, —Ç–æ –≤—ã, –≤–æ–∑–º–æ–∂–Ω–æ, —Å–∫–∏–Ω—É–ª–∏ –±–æ—Ç—É —á–µ–∫ —Ñ–∞–π–ª–æ–º. –í –ø–æ–¥–æ–±–Ω–æ–º —Å–ª—É—á–∞–µ, –Ω–∞–∂–º–∏—Ç–µ: ' –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å '; —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É; ' –î—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º '; ' –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ '. –ü–æ—Å–ª–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.""", reply_markup=pd_rt, disable_web_page_preview=True, parse_mode='HTML')
    if id_v == 5:
        await call.message.edit_text("""–í–µ—Å—å —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞—ë—Ç—Å—è –≤ –±–æ—Ç–µ, –ø–æ–ª—É—á–µ–Ω —á–µ—Å—Ç–Ω—ã–º –ø—É—Ç—ë–º. –ï—Å–ª–∏ –≤—ã —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ç–æ –ª—É—á—à–µ –ø–æ–∫—É–ø–∞—Ç—å –≤ –∏–≥—Ä–µ.""", reply_markup=pd_rt, disable_web_page_preview=True, parse_mode='HTML')
    if id_v == 6:
        await call.message.edit_text("""–ú—ã –Ω–µ –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–∞–∫ –∫–∞–∫, –Ω–µ –∑–Ω–∞–µ–º, –æ—Ç–∫—É–¥–∞ –æ–Ω–∏ –∏—Ö –¥–æ—Å—Ç–∞–ª–∏, –∞ –µ—Å–ª–∏ –∑–Ω–∞–µ–º, —ç—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ –¥–ª—è –Ω–∞—Å, –∏ –º—ã –ø—Ä–æ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É–≤–µ—Ä–µ–Ω–Ω—ã –Ω–∞ 100%""", reply_markup=pd_rt, disable_web_page_preview=True, parse_mode='HTML')